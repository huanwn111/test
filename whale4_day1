预备任务

一. tensorflow安装
推荐Anaconda（针对自己操作系统和位数下载对应版本）；推荐用conda create创建对应的python环境（注：某些python版本可能不支持tensorflow）；通过pip install来安装tensorflow。

参考：
tensorflow安装教程 http://www.tensorflownews.com/series/tensorflow-install-tutorial/

安装步骤：

anaconda环境，3.5以上python

打开Anaconda Prompt命令行编辑器
输入anaconda search -t conda tensorflow
#查找可以安装的tensorflow windows版，找到一个不是GPU的（GPU显卡需求高，可能带不起来）

粘贴找到的可安装版本名称show一个它的安装命令
如：anaconda show dhischfeld/tensorflow

粘贴安装路命令真接安装即可
如conda install --channel tensorflow地址

（命令行粘贴功能开启：在窗口标题栏右击打开属性；勾选选项里的快速编辑模式；选中要粘的内容右击即放入了剪贴板；在要粘贴位置ctrl+v即可）

检验安装是否成功：
打开jupyter notebook，输入import tensorflow as ts，shift+回车 运行，不报错，说明成功了。

二. tensrflow基础

1、图、会话、tensor、变量
使用图(graphs)来表示计算任务、在被称之为会话(Session)的上下文(context)中执行图、使用tensor表示数据、通过变量(Variable)维护状态；


tf(import tensorflow as tf 简写)是一种计算图模型，即用图的形式来表示运算过程的一种模型。
操作一般分两部分：图的构建（即图的定义，相当于定义变量）和图的执行（即在session会话中run执行定义好的运算，相当于取变量执行函数等作用，可理解为实例化对象。但是它是图节点的形式。）

[图的构建]：特点是占位机制，即先定义好tf里的图节点（option op）占位，变量需定义，运算等操作（运算结果也存入节点op）也需定义.

语法：

import tensorflow as tf

c1 = tf.constant([3])
c2 = tf.constant([5])
#tf.Variable([5]) constant定义常量，Variable定义的变量，需全局初始化
#【注意：变量定义，下面要加全局变量初始化语句，并执行】
rs = tf.add(c1,c2)

print(rs) 
#输出Tensor("Add:0", shape=(1,), dtype=int32)
#输出的是一个容器，类似于对象,【叫Tensor】

[图的执行]：在session会话中执行占好位的常量节点变量初始化函数完成赋值，或run执行定义好的运算，相当于取变量执行函数等作用，可理解为实例化对象。但是它是图节点的形式。

#init_op = tf.global_variables_initializer()
#初始化全局变量
sess = tf.Session()
#sess.run(init_op)
#执行变量初始化
print(sess.run(rs))
sess.close()

#输出8

#上面sess实例化建议使用以下语句
with tf.Session() as sess2:
    res = sess2.run(rs)
    #print(rs.eval())
print(res)

#[其它]
Tensorflow中使用with…device语句来指定GPU或CPU资源执行操作。	
with tf.Session() as sess23:
	width tf.device("/gpu:2"):
		m1 = tf.constant([3,4])
		m2 = tf.constant([5,1])
		mult = tf.matmul(m1,m2)#矩阵乘
		res3 = sess3.run(mult)
#“tf.device(“/gpu:2”)”是指定了第二个GPU资源来运行下面的op。依次类推，我们还可以通过“/gpu:3”、“/gpu:4”、“/gpu:5”…来指定第N个GPU执行操作。


with sess.as_default():
    print("默认会话，默认首先执行")

#交互式环境相关方法InteractiveSession(),


2、placeholder,feed,fetch
使用feed和fetch为任意的操作赋值或者从其中获取数据。

#placeholder（类似占位符）,feed（给占位赋值）,fetch(在一个会话中同时运行多个op，函数操作变量赋值等操作，节点)
p1 = tf.placeholder(tf.int32)#需指定数据类型，int32类型不容易报错注意
p2 = tf.placeholder(tf.int32)
add = tf.add(p1,p2)#加
mul = tf.multiply(p1,p2)#乘
with tf.Session() as sess5:
    feedDatas = {p1:3,p2:5}#feed的值字典格式，给placeholder赋值
    rs5 = sess5.run([add,mul],feed_dict=feedDatas)
    #fetch概念，批量执行两个op操作,add加 和 mul乘
print(rs5)


=======参考资料与关注点=========

关注图、会话、tensor、变量、feed和fetch。
使用图(graphs)来表示计算任务、在被称之为会话(Session)的上下文(context)中执行图、使用tensor表示数据、通过变量(Variable)维护状态；使用feed和fetch为任意的操作赋值或者从其中获取数据。

参考：
TENSORFLOW从入门到精通之——TENSORFLOW基本操作 http://www.tensorflownews.com/2018/03/28/tensorflow_base/
tensorflow简介 http://wiki.jikexueyuan.com/project/tensorflow-zh/get_started/introduction.html
tensorflow基本使用 http://wiki.jikexueyuan.com/project/tensorflow-zh/get_started/basic_usage.html
莫凡tensorflow https://morvanzhou.github.io/tutorials/machine-learning/tensorflow/

TensorFlow-Examples https://github.com/aymericdamien/TensorFlow-Examples(关注Hello World、Basic Operations、Linear Regression、Simple Neural Network)

史上最全的Tensorflow学习资源汇总 https://zhuanlan.zhihu.com/p/35515805


三. NLP


1、NLP基础技术:
词汇表示与分析
短语表示与分析
句法语义表示与分析
篇章表示与分析

2、NLP核心技术:

机器翻译
提问回答
信息检索
信息抽取

聊天对话
知识工程
语言生成
推荐系统


3、NLP+（周边相关）:
搜索引擎
智能客服
商业智能
语言助手


======参考资料与关注点=====

关注NLP基础技术、NLP核心技术、NLP+的介绍。
微软周明：自然语言处理的历史与未来 http://zhigu.news.cn/2017-06/08/c_129628590.htm

打卡规则 
学员编号+任务名称 (例如：01+预备任务)

